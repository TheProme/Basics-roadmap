<ResourceDictionary
     xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:local="clr-namespace:SeaBattle.Controls"
    xmlns:helpers="clr-namespace:SeaBattle.Helpers"
    xmlns:vm="clr-namespace:SeaBattle.ViewModels"
    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
    xmlns:converters="clr-namespace:SeaBattle.Controls.Converters">

    <ResourceDictionary x:Key="ButtonStylesDictionary" Source="Styles/ButtonStyles.xaml"/>
    <ResourceDictionary x:Key="ComboBoxStyleDictionary" Source="Styles/CustomComboBox.xaml"/>

    <SolidColorBrush x:Key="NotHitDeck" Color="#6acc74"/>
    <SolidColorBrush x:Key="HitDeck" Color="#d9e655"/>
    <SolidColorBrush x:Key="DestroyedShip" Color="#cc776a"/>
    <SolidColorBrush x:Key="EmptyCellBackground" Color="#55a9e6"/>
    <SolidColorBrush x:Key="MissedCellBackground" Color="#000a54"/>
    <SolidColorBrush x:Key="FogOfWar" Color="#55a9e6"/>
    <SolidColorBrush x:Key="PreviewColor" Color="#a36dde"/>
    
    <converters:InvertableBooleanToVisibilityConverter x:Key="BoolToVisibilityConverter"/>

    <Style x:Key="BlockButtonStyle" TargetType="{x:Type Button}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Width="{TemplateBinding Width}"
                            Height="{TemplateBinding Height}"
                            BorderThickness="1"
                            BorderBrush="Black"
                            Background="Transparent">
                        <ContentPresenter HorizontalAlignment="Center" 
                                          VerticalAlignment="Center" 
                                          ContentTemplate="{TemplateBinding Content}"/>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type local:EmptyFieldCell}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:EmptyFieldCell}">
                    <Grid x:Name="PART_CellGrid"
                          Background="{TemplateBinding Background}">
                        <Button x:Name="PART_EmptyCellHitButton" 
                                Style="{StaticResource BlockButtonStyle}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHit}" Value="False">
                            <Setter Property="Background" Value="{StaticResource EmptyCellBackground}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHit}" Value="True">
                            <Setter Property="Background" Value="{StaticResource MissedCellBackground}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:ShipBlock}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ShipBlock}">
                    <Grid x:Name="PART_ShipBorder"
                          Background="{TemplateBinding Background}">
                        <Button x:Name="PART_HitButton" 
                                Style="{StaticResource BlockButtonStyle}"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHit}" Value="False">
                            <Setter Property="Background" Value="{StaticResource NotHitDeck}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsHit}" Value="True">
                            <Setter Property="Background" Value="{StaticResource HitDeck}"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=ShipDestroyed}" Value="True">
                            <Setter Property="Background" Value="{StaticResource DestroyedShip}"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:Ship}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Ship}">
                    <ItemsControl x:Name="PART_ShipBase" 
                                  ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=local:Ship}, Path=ShipDeck}"
                                  Background="{TemplateBinding Background}"
                                  Width="{TemplateBinding Width}"
                                  Height="{TemplateBinding Height}">
                        <ItemsControl.ItemTemplate>
                            <DataTemplate>
                                <local:ShipBlock Width="{Binding BlockSize}" 
                                                 Height="{Binding BlockSize}"
                                                 Position="{Binding Position}"
                                                 ShipDestroyed="{Binding RelativeSource={RelativeSource AncestorType=local:Ship}, Path=Destroyed}"
                                                 IsHit="{Binding IsHit, Mode=TwoWay}"/>
                            </DataTemplate>
                        </ItemsControl.ItemTemplate>
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <StackPanel Orientation="{Binding RelativeSource={RelativeSource AncestorType=local:Ship}, Path=Orientation}"/>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                    </ItemsControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>



    <!--Empty cell template-->
    <DataTemplate x:Key="EmptyCell" DataType="{x:Type vm:EmptyCellViewModel}">
        <local:EmptyFieldCell x:Name="PART_Cell" 
                              IsHit="{Binding CellValue.IsHit, Mode=TwoWay}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Field}, Path=FieldIsReady}" Value="False">
                <Setter Property="IsEnabled" Value="False"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Field}, Path=FieldIsReady}" Value="True">
                <Setter Property="IsEnabled" Value="True"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsPreview}" Value="True">
                <Setter TargetName="PART_Cell" Property="Background" Value="{StaticResource PreviewColor}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsPreview}" Value="True"/>
                    <Condition Binding="{Binding IsOccupied}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="PART_Cell" Property="Background" Value="{StaticResource DestroyedShip}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Field}, Path=IsPlayerField}" Value="False"/>
                    <Condition Binding="{Binding CellValue.IsHit}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="PART_Cell" Property="Background" Value="{StaticResource FogOfWar}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--Ship cell template-->
    <DataTemplate x:Key="ShipCell" DataType="{x:Type vm:ShipBlockViewModel}">
        <local:ShipBlock x:Name="PART_ShipBlock"
                         Position="{Binding CellValue.Position}"
                         ShipDestroyed="{Binding CellValue.ShipBase.Destroyed}"
                         IsHit="{Binding CellValue.IsHit, Mode=TwoWay}"
                         CellSize="{Binding CellSize, Mode=TwoWay}"/>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Field}, Path=FieldIsReady}" Value="False">
                <Setter Property="IsEnabled" Value="False"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Field}, Path=FieldIsReady}" Value="True">
                <Setter Property="IsEnabled" Value="True"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding IsPreview}" Value="True">
                <Setter TargetName="PART_ShipBlock" Property="Background" Value="{StaticResource PreviewColor}"/>
            </DataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding IsPreview}" Value="True"/>
                    <Condition Binding="{Binding IsOccupied}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="PART_ShipBlock" Property="Background" Value="{StaticResource DestroyedShip}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Field}, Path=ClearFog}" Value="False"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource AncestorType=local:Field}, Path=IsPlayerField}" Value="False"/>
                    <Condition Binding="{Binding CellValue.IsHit}" Value="False"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter TargetName="PART_ShipBlock" Property="Background" Value="{StaticResource FogOfWar}"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <helpers:CellTemplateSelector x:Key="CellTemplateSelector" 
                                  EmptyCell="{StaticResource EmptyCell}"
                                  ShipCell="{StaticResource ShipCell}"/>

    <Style TargetType="{x:Type local:Field}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:Field}">
                    <ItemsControl ItemsSource="{Binding RelativeSource={RelativeSource AncestorType=local:Field}, Path=FieldCells}"
                                  ItemTemplateSelector="{StaticResource CellTemplateSelector}">
                        <ItemsControl.ItemsPanel>
                            <ItemsPanelTemplate>
                                <local:FieldGrid>
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="MouseLeftButtonDown">
                                            <i:InvokeCommandAction Command="{Binding RelativeSource={RelativeSource AncestorType=local:Field}, Path=DataContext.FieldClickCommand}" 
                                                                   CommandParameter="{Binding RelativeSource={RelativeSource AncestorType=local:Field}, Path=DataContext.MousePosition}" />
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                    <i:Interaction.Behaviors>
                                        <helpers:MousePositionBehavior Position="{Binding RelativeSource={RelativeSource AncestorType=local:Field}, 
                                                                                                Path=DataContext.MousePosition, Mode=OneWayToSource}"/>
                                    </i:Interaction.Behaviors>
                                </local:FieldGrid>
                            </ItemsPanelTemplate>
                        </ItemsControl.ItemsPanel>
                    </ItemsControl>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
        <Style.Triggers>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=IsPlayerField}" Value="True"/>
                    <Condition Binding="{Binding RelativeSource={RelativeSource Self}, Path=FieldIsReady}" Value="True"/>
                </MultiDataTrigger.Conditions>
                <MultiDataTrigger.Setters>
                    <Setter Property="IsEnabled" Value="False"/>
                </MultiDataTrigger.Setters>
            </MultiDataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=CanClick}" Value="True">
                <Setter Property="IsEnabled" Value="True"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding RelativeSource={RelativeSource Self}, Path=CanClick}" Value="False">
                <Setter Property="IsEnabled" Value="False"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>



    <Style x:Key="TurnInfo" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="28"/>
        <Setter Property="Foreground" Value="Blue"/>
        <Setter Property="FontFamily" Value="Verdana"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ActivePlayer.FieldPreview.FieldVM.IsPlayerField}" Value="True">
                <Setter Property="Text" Value="Player turn"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActivePlayer.FieldPreview.FieldVM.IsPlayerField}" Value="False">
                <Setter Property="Text" Value="AI turn"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>

    <Style x:Key="WinnerInfo" TargetType="{x:Type TextBlock}">
        <Setter Property="FontSize" Value="28"/>
        <Setter Property="Foreground" Value="Blue"/>
        <Setter Property="FontFamily" Value="Verdana"/>
        <Style.Triggers>
            <DataTrigger Binding="{Binding ActivePlayer.FieldPreview.FieldVM.IsPlayerField}" Value="True">
                <Setter Property="Text" Value="Player won!"/>
            </DataTrigger>
            <DataTrigger Binding="{Binding ActivePlayer.FieldPreview.FieldVM.IsPlayerField}" Value="False">
                <Setter Property="Text" Value="AI won!"/>
            </DataTrigger>
        </Style.Triggers>
    </Style>


    <Style TargetType="{x:Type local:GameView}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:GameView}">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition MaxHeight="100"/>
                            <RowDefinition/>
                        </Grid.RowDefinitions>
                        <Grid Grid.Row="0">
                            <StackPanel Visibility="{Binding CurrentlyPlaying, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter=Normal}"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center">
                                <TextBlock Style="{StaticResource TurnInfo}" 
                                           TextAlignment="Center"
                                           HorizontalAlignment="Center"
                                           VerticalAlignment="Center"/>
                                <Button Grid.Row="1"
                                        VerticalAlignment="Center"
                                        HorizontalAlignment="Center"
                                        Content="Restart"
                                        Margin="5"
                                        Command="{Binding RestartCommand}"
                                        Style="{DynamicResource ActionButton}"/>
                            </StackPanel>
                            <StackPanel Visibility="{Binding GameIsOver, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter=Normal}"
                                        HorizontalAlignment="Center"
                                        VerticalAlignment="Center">
                                <TextBlock Style="{StaticResource WinnerInfo}"
                                           TextAlignment="Center"/>
                                <StackPanel Orientation="Horizontal"
                                            VerticalAlignment="Center"
                                            HorizontalAlignment="Center">
                                    <Button Content="Play again"
                                            Margin="5"
                                            Command="{Binding RestartCommand}"
                                            Style="{DynamicResource ActionButton}"/>
                                    <Button Content="Exit"
                                            Command="{Binding ExitCommand}"
                                            Style="{DynamicResource ActionButton}"/>
                                </StackPanel>
                            </StackPanel>
                        </Grid>
                        <Grid Grid.Row="1">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition MaxWidth="180"/>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="60"/>
                                <ColumnDefinition/>
                                <ColumnDefinition MaxWidth="180"/>
                            </Grid.ColumnDefinitions>
                            <local:GameSetupControl Grid.Column="0" 
                                                    DataContext="{Binding Player.FieldPreview}"
                                                    Margin="10"
                                                    VerticalAlignment="Center"
                                                    HorizontalAlignment="Center"/>
                            <local:Field DataContext="{Binding Player.FieldPreview}"
                                         Grid.Column="1"
                                         Margin="10 20 0 20"
                                         ClearFog="{Binding FieldVM.ClearFog}"
                                         IsPlayerField="{Binding FieldVM.IsPlayerField}"
                                         FieldIsReady="{Binding FieldVM.IsReady}"
                                         Ships="{Binding FieldVM.Ships}"
                                         FieldCells="{Binding FieldVM.FieldCells}"
                                         CanClick="{Binding FieldVM.CanClick}">
                            </local:Field>
                            <local:Field DataContext="{Binding AI.FieldPreview}"
                                         Grid.Column="3"
                                         Margin="10 20 0 20"
                                         ClearFog="{Binding FieldVM.ClearFog}"
                                         IsPlayerField="{Binding FieldVM.IsPlayerField}"
                                         FieldIsReady="{Binding FieldVM.IsReady}"
                                         Ships="{Binding FieldVM.Ships}"
                                         FieldCells="{Binding FieldVM.FieldCells}"
                                         CanClick="{Binding FieldVM.CanClick}">
                            </local:Field>
                        </Grid>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type local:GameSetupControl}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:GameSetupControl}">
                    <Border Visibility="{Binding FieldVM.IsPlayerField, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter=Normal}">
                        <Grid x:Name="setupOptionsGrid"
                                  Visibility="{Binding FieldVM.IsReady, Converter={StaticResource BoolToVisibilityConverter}, ConverterParameter=Inverted}">
                            <StackPanel Orientation="Vertical">
                                <StackPanel>
                                    <TextBlock Text="Ship size" 
                                                   Style="{DynamicResource SetupButtonText}"
                                                   VerticalAlignment="Center" 
                                                   HorizontalAlignment="Center" 
                                                   Margin="5"
                                                   Foreground="{DynamicResource MainButtonsColor}"/>
                                    <ComboBox ItemsSource="{Binding ShipSizeValues}" 
                                                  SelectedItem="{Binding CurrentShipSize}"
                                                  Style="{DynamicResource CustomComboBox}"
                                                  Width="150"/>
                                </StackPanel>
                                <StackPanel MinHeight="190"
                                            MinWidth="140"
                                            Height="195">
                                    <StackPanel>
                                        <StackPanel Orientation="Horizontal"
                                                        VerticalAlignment="Top"
                                                        HorizontalAlignment="Center"
                                                        Margin="5">
                                            <TextBlock Text="Left: "
                                                           Style="{DynamicResource SetupButtonText}"
                                                           Foreground="{DynamicResource MainButtonsColor}"/>
                                            <TextBlock Text="{Binding ShipsLeft}"
                                                           Style="{DynamicResource SetupButtonText}"
                                                           Foreground="{DynamicResource MainButtonsColor}"/>
                                        </StackPanel>
                                        <local:Ship Orientation="{Binding PreviewShip.Orientation}" 
                                                    ShipDeck="{Binding PreviewShip.ShipDeck}" 
                                                    ShipSize="{Binding PreviewShip.ShipSize}" 
                                                    HeadPosition="{Binding PreviewShip.HeadPosition}" 
                                                    Destroyed="{Binding PreviewShip.Destroyed}"
                                                    Margin="0 10 0 0"
                                                    IsEnabled="False"
                                                    VerticalAlignment="Center" 
                                                    HorizontalAlignment="Center"/>
                                    </StackPanel>
                                </StackPanel>
                                <Button Content="Rotate" 
                                            Command="{Binding RotateShipCommand}"
                                            Style="{DynamicResource SetupButton}"/>
                                <Button Content="Randomize" 
                                            Command="{Binding RandomizePlacementCommand}"
                                            Style="{DynamicResource SetupButton}"/>
                                <ToggleButton IsChecked="{Binding IsRemoving}" 
                                                  Style="{DynamicResource ToggleAction}"
                                                  Content="Remove"/>
                                <Button Command="{Binding SetFieldCommand}"
                                            Content="Ready"
                                            Style="{DynamicResource SetupButton}"/>
                            </StackPanel>
                        </Grid>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>
